

#!/bin/sh
RUNSTATEDIR="/var/run"
SYSCONFDIR="/etc"
NETPLEX_PIDFILE="${RUNSTATEDIR}/netplex.pid"
CFG_DIR=${SYSCONFDIR}/pearbox/network/config/
STATUS_DIR=${RUNSTATEDIR}/pearbox/network/wan
CFG_FILE="${CFG_DIR}"/running_conf.json
update_v4_config()
{
    local ifname=$1
    local status=$(ifstatus $ifname)
    generate_running_conf
    nicname=$(echo $status | jq -r '.device')
    STATUS_FILE=${STATUS_DIR}/ifstate-${nicname}.json
    status_content=`cat $STATUS_FILE`
    cfg_content=`cat $STATUS_FILE`
    netmask=${J_T3_mask}
    cidr=`_v4_mask_to_cidr $netmask`
    [ -z "$status_content" ] && status_content='{}'
    [ -z "$cfg_content" ] && cfg_content='{}'
    case $2 in
    update)
        first_dns=`echo $dns | cut -d ' ' -f 1`
        new_cfg_v4="{
            \"if_down\": false,
            \"ip_bound\": true,
            \"ip\": \"${ip}\",
            \"cidr\": \"${cidr}\",
            \"gateway\": \"${router}\",
            \"dns\": \"${first_dns}\"
        }"
        ;;
    remove)
        new_cfg_v4="{
            \"if_down\": true,
            \"ip_bound\": false,
            \"ip\": \"\",
            \"gateway\": \"\",
            \"dns\": \"\"
        }"
        ;;
    esac
    new_status_content=`echo $status_content | jq ". + $new_cfg_v4"`
    echo $new_status_content > $STATUS_FILE
    send_update_signal
}

update_v6_config()
{
    local ifname=$1
    local status=$(ifstatus $ifname)
    generate_running_conf
    nicname=$(echo $status | jq -r '.device')
    STATUS_FILE=${STATUS_DIR}/ifstate-${nicname}.json
    status_content=`cat $STATUS_FILE`
    cfg_content=`cat $STATUS_FILE`
    [ -z "$status_content" ] && status_content='{}'
    [ -z "$cfg_content" ] && cfg_content='{}'
    case $2 in
    update)
        gateway6=`echo $RA_ROUTES | cut -d ',' -f 2`
        ip6=`echo $RA_ADDRESSES | cut -d ',' -f 1`
        new_cfg_v6="{
            \"if_down\": false,
            \"ip6_bound\": true,
            \"ip6\": \"${ip6}\",
            \"gateway6\": \"${gateway6}\",
            \"prefix6\": \"${J_T6_target}\",
            \"cidr6\": \"${J_T6_netmask}\",
            \"dns6\": \"${J_T6_dns}\"
        }"
        ;;
    remove)
        new_cfg_v6="{
            \"ip6_bound\": false,
            \"ip6\": \"\",
            \"gateway6\": \"\",
            \"dns6\": \"\",
            \"prefix6\": \"\",
            \"cidr6\": \"\",
            \"dns6\": \"\"
        }"
        ;;
    esac
    new_status_content=`echo $status_content | jq ". + $new_cfg_v6"`
    echo $new_status_content > $STATUS_FILE
    send_update_signal
}

pppoe_update_config()
{
    local ifname=$1
    generate_running_conf
    device=`uci -q get network.$ifname.ifname`
    [ ${device:0:1} == "@" ] && ifname=${device##@}
    nicname=pppoe-${ifname}
    openwrt_ifstatus=`ifstatus $ifname`
    STATUS_FILE=${STATUS_DIR}/ifstate-${nicname}.json
    status_content=`cat $STATUS_FILE`
    cfg_content=`cat $STATUS_FILE`
    [ -z "$status_content" ] && status_content='{}'
    [ -z "$cfg_content" ] && cfg_content='{}'
    up=`echo $openwrt_ifstatus | jq -r '.up'`
    ip=`echo $openwrt_ifstatus | jq -r '."ipv4-address"[0].address'`
    router=`echo $openwrt_ifstatus | jq -r '.route[0].nexthop'`
    cidr=`echo $openwrt_ifstatus | jq -r '."ipv4-address"[0].mask'`
    dns=`echo $openwrt_ifstatus | jq -r '."dns-server"[0]'`
    dns=`echo $openwrt_ifstatus | jq -r '."dns-server"[0]'`
    [ -n "$ip" ] && ip_bound=true || ip_bound=false
    [ "$gateway6" != "null" ] && ip6_bound=true || ip6_bound=false
    echo $up
    case $up in
    true)
        if $ip_bound; then
            new_cfg_v4="{
                \"if_down\": false,
                \"ip_bound\": true,
                \"ip\": \"${ip}\",
                \"gateway\": \"${router}\",
                \"cidr\": \"${cidr}\",
                \"dns\": \"${dns}\"
            }"
        else
            new_cfg_v4="{
                \"if_down\": false,
                \"ip_bound\": false,
                \"cidr\": \"\",
                \"ip\": \"\",
                \"gateway\": \"\",
                \"dns\": \"\"
            }"
        fi
        new_cfg_v6="{
            \"if_down\": false,
            \"ip6_bound\": false,
            \"ip6\": \"\",
            \"gateway6\": \"\",
            \"dns6\": \"\",
            \"prefix6\": \"\",
            \"cidr6\": \"\",
            \"dns6\": \"\"
        }"
        ;;
    false)
        new_cfg_v4="{
            \"if_down\": true,
            \"ip_bound\": false,
            \"ip\": \"\",
            \"gateway\": \"\",
            \"dns\": \"\"
        }"
        new_cfg_v6="{
            \"if_down\": true,
            \"ip6_bound\": false,
            \"ip6\": \"\",
            \"gateway6\": \"\",
            \"dns6\": \"\",
            \"prefix6\": \"\",
            \"cidr6\": \"\",
            \"dns6\": \"\"
        }"
        ;;
    esac
    new_status_content=`echo $status_content | jq ". + $new_cfg_v4"`
    new_status_content=`echo $new_status_content | jq ". + $new_cfg_v6"`
    echo $new_cfg_v4 $new_cfg_v6
    echo $new_status_content > $STATUS_FILE
    send_update_signal
}

generate_running_conf(){
    cfg_content=`cat $CFG_FILE`
    cfg_content='{}'
    wan_zone_ifaces=`uci -q get firewall.@zone[1].network | tr -d '"'`
    for iface in $wan_zone_ifaces; do
        proto=`uci -q get network.$iface.proto`
        iface_nic=`uci -q get network.$iface.ifname`
        ifdevice=`uci -q get network.$iface.device`
        [ ${iface_nic:0:1} == "@" ] || [ ${ifdevice:0:1} == "@" ] && continue
        [ "$proto" == "pppoe" ] && iface_nic="pppoe-${iface}"
        new_interface="{
            \"${iface_nic}\": {
                \"default_route\": 1,
                \"type\": \"$proto\"
            }
        }"
        [ -n "$iface_nic" ] && cfg_content=`echo $cfg_content | jq ". + $new_interface"`
        [ $proto == "static" ] && {
            ip=`uci -q get network.$iface.ipaddr`
            gateway=`uci -q get network.$iface.gateway`
            dns=`uci -q get network.$iface.dns`
            mask=`uci -q get network.$iface.netmask`
            cidr=`_v4_mask_to_cidr $mask`
            first_dns=`echo $dns | cut -d ' ' -f 1`
            new_interface="{
                    \"if_down\": false,
                    \"ip_bound\": true,
                    \"ip\": \"${ip}\",
                    \"cidr\": \"${cidr}\",
                    \"gateway\": \"${gateway}\",
                    \"dns\": \"${first_dns}\",
                    \"ip6_bound\": false,
                    \"ip6\": \"\",
                    \"gateway6\": \"\",
                    \"prefix6\": \"\",
                    \"cidr6\": \"\",
                    \"dns6\": \"\"
            }"
            STATUS_FILE=${STATUS_DIR}/ifstate-${iface_nic}.json
            echo $new_interface > $STATUS_FILE
        }
    done
    echo $cfg_content > $CFG_FILE
}

send_update_signal(){
    kill -USR1 $(cat "${NETPLEX_PIDFILE}")
}

_v4_mask_to_cidr(){
    local mask=$1
    local nbits=0
    local IFS=.
    for dec in $mask; do
        case $dec in
        255) let nbits+=8;;
        254) let nbits+=7;;
        252) let nbits+=6;;
        248) let nbits+=5;;
        240) let nbits+=4;;
        224) let nbits+=3;;
        192) let nbits+=2;;
        128) let nbits+=1;;
        0) let nbits+=0;;
        esac
    done
    echo $nbits
}


mk_pear_dir(){
    mkdir -p $STATUS_DIR
    mkdir -p $CFG_DIR
}
